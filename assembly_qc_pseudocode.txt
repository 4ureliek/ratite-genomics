QC pseudo-code:

1:
reverse complement jumping libraries to create innie orientation for REAPR
(use seqtk)
also merge rapid run and high output libraries

#cat droNov3kb.trim_1P.fastq.gz droNov_R1_ho_3kb_1P.fastq.gz | seqtk seq -r - > droNov_3kb_R1.fastq.gz

4:
CEGMA pipeline

cegma -g ../init/final.assembly.fasta -o aptOwe_init -T 16 --vrt &> ../logs/cegma_2010904.log

(try BUSCO too? -- account for microchromosome issues)
(run CEGMA / BUSCO on several bird references - ostrich, tinamou, chicken at least - to confirm)
(read about microchromosome issues)

BUSCO script
a: prepare and refine reference (chicken) BUSCOs:
makeblastdb -dbtype nucl -in GGALL_genome.fas -parse_seqids
tblastn -db GGALL_genome.fas -query BUSCO_GGALL.fas -evalue 0.1 -out GGALL.blastout.txt -outfmt 6 -seg no -num_threads 24
makeblastdb -in BUSCO_GGALL.fas -parse_seqids 
blastp -db BUSCO_GGALL.fas -query BUSCO_GGALL.fas -evalue 0.1 -out BUSCO_GGALL.SELF.blastout.txt -outfmt 6 -seg no -num_threads 24
perl BUSCO.pl --refine_reference GGALL 95
makeblastdb -in BUSCO_GGALL_refined.fas -parse_seqids 
blastp -db BUSCO_GGALL_refined.fas -query BUSCO_GGALL_refined.fas -evalue 0.1 -out BUSCO_GGALL_refined.SELF.blastout.txt -outfmt 6 -seg no -num_threads 24
tblastn -db GGALL_genome.fas -query BUSCO_GGALL_refined.fas -evalue 0.1 -out GGALL_refined.blastout.txt -outfmt 6 -seg no -num_threads 24
perl BUSCO.pl --run_refined GGALL GGALL

b:
run for each assembly
ASSEMBLYPATH=$1
SPEC=$2
cp $ASSEMBLYPATH ${SPEC}_genome.fas
makeblastdb -dbtype nucl -in ${SPEC}_genome.fas -parse_seqids 
tblastn -db ${SPEC}_genome.fas -query BUSCO_GGALL_refined.fas -evalue 0.1 -out ${SPEC}_refined.blastout.txt -outfmt 6 -seg no -num_threads 24
perl BUSCO.pl --run_refined $SPEC DMELA

2:
REAPR pipeline
	-fa check, map with smalt, run pipeline
	-mostly can use standard options I think

#reapr facheck assembly.fa
#reapr smaltmap assembly.fa short_1.fq short_2.fq short_mapped.bam
#reapr perfectfrombam short_mapped.bam perfect 100 500 3 4 76 ##modify this line to get correct options for our setup
#reapr smaltmap assembly.fa long_1.fq long_2.fq long_mapped.bam
#reapr pipeline assembly.fa long_mapped.bam output_directory perfect

3:
FRC and FindTranslocations
	-complement to REAPR; can use the same bam files produced by reapr pipeline with smalt
	-simple options	