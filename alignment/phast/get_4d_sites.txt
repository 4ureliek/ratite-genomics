#convert to GTF
module load cufflinks
gffread --no-pseudo -C -T -o galGal4.gtf GCF_000002315.3_Gallus_gallus-4.0_genomic.gff 
grep -v "^NC_001323.1" galGal4.gtf | grep "protein_coding" | grep -P "\tCDS\t" > galGal4_filt.gtf

#convert to genepred
gtfToGenePred galGal4_filt.gtf galGal4.gp

#convert to bed
genePredToBed galGal4.gp galGal4.bed

#extract 4D sites
hal4dExtract --conserved --inMemory /n/regal/edwards_lab/ratites/wga/ratite_final_20150627/ratiteAlign.hal galGal galGal4.bed galGal4_4d.bed

#not going to use the wrapper scripts as they seem to do odd things. So let's first get a chicken-referenced MAF

hal2mafMP.py --numProc 48 --refGenome galGal --noAncestors --noDupes --refTargets galGal4_4d.bed /n/regal/edwards_lab/ratites/wga/ratite_final_20150627/ratiteAlign.hal neut4d_input_galGal_ref.maf

#fix MAF with sed
sed -i -e 2d neut4d_input_galGal_ref.maf

#make tree
halStats --tree /n/regal/edwards_lab/ratites/wga/ratite_final_20150627/ratiteAlign.hal > tree1.nh
perl -p -i -e 's/Anc\d+//g' tree1.nh 
nw_topology tree1.nh > ratiteTree.nh

#resolving bifurcations:
#1: reptiles -- turtles as outgroup to archosaurs, gharial + crocs --> croc genome paper
#2: palaeognaths -- several options in different trees
#3: passerines -- ground tit as outgroup to other passerines per Alison's UCE tree
#4: accept Afroaves to resolve landbird polytomy
#5: accept Columbea as sister to passera
#6: balReg + chaVoc = clade (Gruimorphae)
#7: accept Otidae as outgroup to other Passera
#8: Gruimorphae outgroup to waterbirds + landbirds

#now rheas
#ver1 = UCE tree (rheas + tinamous)
#ver2 = Mitchell tree (rheas outgroup to non-ostrichs)
#ver3 = rheas + ECK clade

#convert to SS
msa_view neut4d_input_galGal_ref.maf --out-format SS --unordered-ss > neut4d_input.ss

#run phyloFit
phyloFit --tree ratiteTree.ver1.nh --subst-mod SSREV --out-root neut_ver1 --msa-format SS --sym-freqs neut4d_input.ss
phyloFit --tree ratiteTree.ver2.nh --subst-mod SSREV --out-root neut_ver2 --msa-format SS --sym-freqs neut4d_input.ss
phyloFit --tree ratiteTree.ver3.nh --subst-mod SSREV --out-root neut_ver3 --msa-format SS --sym-freqs neut4d_input.ss

##phyloFit logs
[tsackton@bioinf01 phast]$ phyloFit --tree ratiteTree.ver1.nh --subst-mod SSREV --out-root neut_ver1 --msa-format SS --sym-freqs neut4d_input.ss
Reading alignment from neut4d_input.ss ...
Compacting sufficient statistics ...
Fitting tree model to neut4d_input.ss using SSREV ...
numpar = 87
Done.  log(likelihood) = -37564346.336406 numeval=18634
WARNING: BFGS algorithm reached its maximum number of iterations.
Writing model to neut_ver1.mod ...
Done.

[tsackton@bioinf01 phast]$ phyloFit --tree ratiteTree.ver2.nh --subst-mod SSREV --out-root neut_ver2 --msa-format SS --sym-freqs neut4d_input.ss
Reading alignment from neut4d_input.ss ...
Compacting sufficient statistics ...
Fitting tree model to neut4d_input.ss using SSREV ...
numpar = 87
Done.  log(likelihood) = -37564931.298420 numeval=11930
Writing model to neut_ver2.mod ...
Done.

[tsackton@bioinf01 phast]$ phyloFit --tree ratiteTree.ver3.nh --subst-mod SSREV --out-root neut_ver3 --msa-format SS --sym-freqs neut4d_input.ss
Reading alignment from neut4d_input.ss ...
Compacting sufficient statistics ...
Fitting tree model to neut4d_input.ss using SSREV ...
numpar = 87
Done.  log(likelihood) = -37663646.724282 numeval=7763
Writing model to neut_ver3.mod ...
Done.

#want to be sure the neutral models are reliable, so rerun with --init-random, start 5 independent runs of each model (15 total)
#also because of convergence error on ver1, rerun with --init-model to retry 
#code to run random iterations:

for ITER in 1 2 3 4 5
do
	phyloFit --tree ratiteTree.ver1.nh --init-random --subst-mod SSREV --out-root neut_ver1_${ITER} --msa-format SS --sym-freqs neut4d_input.ss &> phyloFit_ver1_${ITER}.log &
	phyloFit --tree ratiteTree.ver2.nh --init-random --subst-mod SSREV --out-root neut_ver2_${ITER} --msa-format SS --sym-freqs neut4d_input.ss &> phyloFit_ver2_${ITER}.log &
	phyloFit --tree ratiteTree.ver3.nh --init-random --subst-mod SSREV --out-root neut_ver3_${ITER} --msa-format SS --sym-freqs neut4d_input.ss &> phyloFit_ver3_${ITER}.log &
done

#code to improve ver1 model 
phyloFit --init-model neut_ver1.mod --out-root neut_ver1_run2 --msa-format SS --sym-freqs neut4d_input.ss &> phyloFit_ver1_rerun.log &

#finally, improve all random models with same approach as above
for MOD in $(ls neut*.mod);
do
	NEWMOD=${MOD%%.*}
	phyloFit --init-model $MOD--out-root ${NEWMOD}_update --msa-format SS --sym-freqs neut4d_input.ss &> ${MOD}_update.log &
done


	
